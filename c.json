{
  "Print to console": {
    "prefix": "genc",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <math.h>",
      "#include <string.h>",
      "#include <malloc.h>",
      "",
      "int main()",
      "{",
      "",
      "\treturn 0;",
      "}"
    ],
    "description": "Generates a basic C program"
  },
  "Printf()": {
    "prefix": "pf",
    "body": ["printf(\"$1\");"],
    "description": "Writes printf() inside the code"
  },
  "Scanf()": {
    "prefix": "sf",
    "body": ["scanf(\"$1\", $2);"],
    "description": "Writes scanf() inside the code"
  },
  "Creates menu scheme": {
    "prefix": "cmenu",
    "body": [
      "\twhile (run)",
      "    {",
      "        printf(\"1. $1\\n\");",
      "        printf(\"2. $2\\n\");",
      "        printf(\"3. $3\\n\");",
      "        printf(\"4. $4\\n\");",
      "        printf(\"5. $5\\n\");",
      "        printf(\"6. $6\\n\");",
      "        printf(\"7. $7\\n\");",
      "        printf(\"8. $8\\n\");",
      "        printf(\"$9. Izlaz\\n\");",
      "",
      "        printf(\"Unesite opciju: \");",
      "        scanf(\"%d\", &opcija);",
      "",
      "        switch(opcija)",
      "        {",
      "            case 1:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 2:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 3:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 4:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 5:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 6:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 7:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case 8:",
      "                {",
      "",
      "                }",
      "                break;",
      "            case $10:",
      "                {",
      "\t\t\t\t   run = 0;",
      "                }",
      "                break;",
      "            default:",
      "                {",
      "                        printf(\"Uneta opcija ne postoji!\\n\");",
      "                }",
      "                break;",
      "    ",
      "        }",
      "    }",
      ""
    ],
    "description": "Creates menu scheme"
  },
  "Size of array": {
    "prefix": "sizeniz",
    "body": ["int brElemenata = sizeof(niz) / sizeof(niz[0]);"],
    "description": "Writes printf() inside the code"
  },
  "brisanjeElementaNiza": {
    "prefix": "arrayremoveel",
    "body": [
      "void brisanjeElementaNiza()",
      "{",
      "    int *p, A[100], n, brisanje;",
      "",
      "    printf(\"Unesite duzinu niza: \");",
      "    scanf(\"%d\", &n);",
      "    printf(\"Unesite elemente niza: \\n\");",
      "    for (p = A; p < A + n; p++)",
      "    {",
      "        scanf(\"%d\", p);",
      "    }",
      "    p = A;",
      "    printf(\"Unesite element koji zelite da obrisete: \");",
      "    scanf(\"%d\", &brisanje);",
      "    for (p = A; p < A + n; p++)",
      "    {",
      "        if (*p == brisanje)",
      "        {",
      "            for (p = p; p < A + n; p++)",
      "            {",
      "                *p = *(p + 1);",
      "            }",
      "            n--;",
      "        }",
      "    }",
      "    printf(\"Novi niz je: \");",
      "    for (p = A; p < A + n; p++)",
      "    {",
      "        printf(\"%d \", *p);",
      "    }",
      "}"
    ],
    "description": "Creates menu scheme"
  },
  "Reverses string": {
    "prefix": "revstr",
    "body": [
      "void reverseString()",
      "{",
      "    int n, i;",
      "    char str[] = \"Hello World!\";",
      "    n = strlen(str);",
      "",
      "    for (i = 0; i < n / 2; i++)",
      "    {",
      "        char temp = str[i];",
      "        str[i] = str[n - i - 1];",
      "        str[n - i - 1] = temp;",
      "    }",
      "",
      "    printf(\"Reversed string: %s\\n\", str);",
      "}"
    ],
    "description": "Reverses string"
  },
  "List cheatsheet 1": {
    "prefix": "listcheat1",
    "body": [
      "typedef struct elem",
      "{",
      "    int broj;",
      "    struct elem *sled;",
      "} Elem;",
      "",
      "int duzinaListe(Elem *lst)",
      "{",
      "    Elem *tek;",
      "    int n = 0;",
      "    for (tek = lst; tek; tek = tek->sled)",
      "    {",
      "        n++;",
      "    }",
      "    return n;",
      "}",
      "",
      "void ispisiListu(Elem *lst)",
      "{",
      "    Elem *tek;",
      "    for (tek = lst; tek; tek->sled)",
      "    {",
      "        printf(\"%d\", tek->broj);",
      "    }",
      "}",
      "",
      "Elem *dodajNaPocetak(Elem *lst, int b)",
      "{",
      "    Elem *novi = malloc(sizeof(Elem));",
      "    novi->broj = b;",
      "    novi->sled = lst;",
      "    lst = novi;",
      "",
      "    return lst;",
      "}",
      "",
      "Elem *dodajNaKraj(Elem *lst, int b)",
      "{",
      "    Elem *tek, *novi = malloc(sizeof(Elem));",
      "    novi->broj = b;",
      "    novi->sled = NULL;",
      "    if (!lst)",
      "    {",
      "        lst = novi;",
      "    }",
      "    else",
      "    {",
      "        for (tek = lst; tek->sled; tek = tek->sled)",
      "        {",
      "            tek->sled = novi;",
      "        }",
      "    }",
      "    return lst;",
      "}",
      "",
      "void brisiListu(Elem *lst)",
      "{",
      "    Elem *stari;",
      "    while (lst)",
      "    {",
      "        stari = lst;",
      "        lst = lst->sled;",
      "        free(stari);",
      "    }",
      "}",
      "",
      "Elem *brisiElement(Elem *lst, int b)",
      "{",
      "    Elem *tek = lst, *pret = NULL, *stari;",
      "    while (tek)",
      "    {",
      "        if (tek->broj != b)",
      "        {",
      "            pret = tek;",
      "            tek = tek->sled;",
      "        }",
      "        else",
      "        {",
      "            stari = tek;",
      "            tek = tek->sled;",
      "            if (!pret)",
      "            {",
      "                lst = tek;",
      "            }",
      "            else",
      "            {",
      "                pret->sled = tek;",
      "            }",
      "            free(stari);",
      "        }",
      "        return lst;",
      "    }",
      "}",
      "",
      "Elem *ubaciElement(Elem *lst, int b)",
      "{",
      "    Elem *tek = lst, *pret = NULL, *novi;",
      "    while (tek && tek->broj < b)",
      "    {",
      "        pret = tek;",
      "        tek = tek->sled;",
      "    }",
      "",
      "    novi = malloc(sizeof(Elem));",
      "    novi->broj = b;",
      "    novi->sled = tek;",
      "    if (!pret)",
      "    {",
      "        lst = novi;",
      "    }",
      "    else",
      "    {",
      "        pret->sled = novi;",
      "    }",
      "    return lst;",
      "}"
    ],
    "description": "List cheatsheet 1"
  },
  "List cheatsheet Zaposleni": {
    "prefix": "zaplistcheat",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <math.h>",
      "#include <string.h>",
      "#include <malloc.h>",
      "",
      "struct node",
      "{",
      "    char ime[50];",
      "    int JMBG;",
      "    int plata;",
      "    struct node *next;",
      "};",
      "",
      "int main()",
      "{",
      "    int opcija, mod, run = 1;",
      "",
      "    struct node *h, *t, *t1, *w, *q;",
      "    h = NULL;",
      "",
      "    while (run)",
      "    {",
      "        printf(\"\\n/*BAZA ZPOSLENIH */\\n\");",
      "        printf(\"1.PRIKAZ\\n\");",
      "        printf(\"2.DODAJ\\n\");",
      "        printf(\"3.MODIFIKUJ\\n\");",
      "        printf(\"4.IZLAZ\\n\");",
      "",
      "        printf(\"\\nUnesite izbor= \");",
      "        scanf(\"%d\", &opcija);",
      "",
      "        switch (opcija)",
      "        {",
      "        case 1:",
      "        {",
      "            if (h == NULL)",
      "            {",
      "                printf(\"Nema rekorda u bazi\");",
      "            }",
      "            w = h;",
      "            while (w != NULL)",
      "            {",
      "                printf(\"\\nJMBG zaposlenog: %d\\nIme zaposlenog: %s\\nPlata zaposlenog: %d\\n\", w->JMBG, w->ime, w->plata);",
      "                w = w->next;",
      "            }",
      "        }",
      "        break;",
      "        case 2:",
      "        {",
      "            printf(\"Unesite novi rekord\");",
      "            if (h == NULL)",
      "            {",
      "                h = t = (struct node *)malloc(sizeof(struct node));",
      "                printf(\"\\nJMBG zaposlenog: \");",
      "                scanf(\"%d\", &t->JMBG);",
      "                printf(\"Ime zaposlenog: \");",
      "                scanf(\"%s\", &t->ime);",
      "                printf(\"Plata zaposlenog: \");",
      "                scanf(\"%d\", &t->plata);",
      "                t->next = NULL;",
      "                break;",
      "            }",
      "            else",
      "            {",
      "                t1 = (struct node *)malloc(sizeof(struct node));",
      "                printf(\"\\nJMBG zaposlenog: \");",
      "                scanf(\"%d\", &t1->JMBG);",
      "                printf(\"Ime zaposlenog: \");",
      "                scanf(\"%s\", &t1->ime);",
      "                printf(\"Plata zaposlenog: \");",
      "                scanf(\"%d\", &t1->plata);",
      "                t1->next = t->next;",
      "                t->next = t1;",
      "                t = t1;",
      "            }",
      "        }",
      "        break;",
      "        case 3:",
      "        {",
      "            printf(\"Unesite JMBG zaposlenog kog zelite da modifikujete\");",
      "            scanf(\"%d\", &mod);",
      "            while (t->JMBG != mod)",
      "            {",
      "                t = t->next;",
      "            }",
      "            printf(\"\\nNovi JMBG zaposlenog: \");",
      "            scanf(\"%d\", &t->JMBG);",
      "            printf(\"Novo ime zaposlenog: \");",
      "            scanf(\"%s\", &t->ime);",
      "            printf(\"Nova plata zaposlenog: \");",
      "            scanf(\"%d\", &t->plata);",
      "        }",
      "        break;",
      "        case 4:",
      "        {",
      "            run = 0;",
      "        }",
      "        break;",
      "        default:",
      "        {",
      "            printf(\"Uneta opcija ne postoji!\\n\");",
      "        }",
      "        break;",
      "        }",
      "    }",
      "",
      "    return 0;",
      "}"
    ],
    "description": "List cheatsheet Zaposleni"
  },
  "Stack cheatsheet 1": {
    "prefix": "staticstack",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <math.h>",
      "#include <string.h>",
      "#include <malloc.h>",
      "#define MAXVALUE 100",
      "",
      "int stek[MAXVALUE];",
      "int brElem = 0;",
      "",
      "void Push(int v)",
      "{",
      "    if (brElem == MAXVALUE)",
      "    {",
      "        printf(\"Stek je pun\\n\");",
      "        return;",
      "    }",
      "    stek[brElem++] = v;",
      "    printf(\"Dodaje se element %d\\n\", v);",
      "}",
      "",
      "void Pop()",
      "{",
      "    if (brElem == 0)",
      "    {",
      "        printf(\"Stek je prazan\");",
      "        return;",
      "    }",
      "    //",
      "    printf(\"Uklanja se element %d\\n\", stek[brElem--]);",
      "}",
      "",
      "int Print()",
      "{",
      "    int i;",
      "    printf(\"Stek: \");",
      "    for (i = brElem - 1; i >= 0; i--)",
      "    {",
      "        printf(\"%d \", stek[i]);",
      "    }",
      "    printf(\"\\n\");",
      "}",
      "",
      "int main()",
      "{",
      "    int i;",
      "    int A[5] = {1, 5, 8, 2, 12};",
      "    for (i = 0; i < 5; i++)",
      "    {",
      "        Push(A[i]);",
      "    }",
      "    Print();",
      "    Pop();",
      "    Print();",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Stack cheatsheet"
  },
  "Stack cheatsheet 2": {
    "prefix": "dynamicstack",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <math.h>",
      "#include <string.h>",
      "#include <malloc.h>",
      "",
      "typedef struct stek",
      "{",
      "    int broj;",
      "    struct stek *sledeci;",
      "} Stek;",
      "",
      "Stek *push(Stek *vrh, int b)",
      "{",
      "    Stek *novi = malloc(sizeof(Stek));",
      "    novi->broj = b;",
      "    novi->sledeci = vrh;",
      "    vrh = novi;",
      "",
      "    return vrh;",
      "}",
      "",
      "void ispis(Stek *vrh)",
      "{",
      "    printf(\"\\nISPIS\\n\");",
      "    Stek *tek;",
      "    for (tek = vrh; tek; tek = tek->sledeci)",
      "    {",
      "        printf(\"%d \", tek->broj);",
      "    }",
      "}",
      "",
      "void top(Stek *vrh)",
      "{",
      "    printf(\"\\nTop = %d\\n\", vrh->broj);",
      "}",
      "",
      "Stek *pop(Stek *vrh)",
      "{",
      "    printf(\"\\nPop = %d\\n\", vrh->broj);",
      "    Stek *stari = vrh;",
      "    vrh = vrh->sledeci;",
      "    free(stari);",
      "",
      "    return vrh;",
      "}",
      "",
      "int main()",
      "{",
      "    Stek *vrh = NULL;",
      "    int i;",
      "    int A[5] = {1, 5, 8, 2, 12};",
      "    for (i = 0; i < 5; i++)",
      "    {",
      "        vrh = push(vrh, A[i]);",
      "    }",
      "    ispis(vrh);",
      "    top(vrh);",
      "    ispis(vrh);",
      "    vrh = pop(vrh);",
      "    ispis(vrh);",
      "    top(vrh);",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Stack cheatsheet"
  },
  "Queue student": {
    "prefix": "queuestud",
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <math.h>",
      "#include <string.h>",
      "#include <malloc.h>",
      "",
      "typedef struct node",
      "{",
      "    char index[20];",
      "    char name[20];",
      "    int age;",
      "    int year;",
      "    struct node *next;",
      "} Node;",
      "",
      "Node *queue_add(Node *queue, char index[], char name[], int age, int year)",
      "{",
      "    Node *new_node = NULL;",
      "    new_node = ((Node *)malloc(sizeof(Node)));",
      "    if (new_node == NULL)",
      "    {",
      "        printf(\"Nema vise prostora\");",
      "        exit(-1);",
      "        return NULL;",
      "    }",
      "    strcpy(new_node->index, index);",
      "    strcpy(new_node->name, name);",
      "    new_node->age = age;",
      "    new_node->year = year;",
      "    new_node->next = NULL;",
      "    if (queue == NULL)",
      "    {",
      "        queue = new_node;",
      "    }",
      "    else",
      "    {",
      "        while (queue->next != NULL)",
      "        {",
      "            queue = queue->next;",
      "        }",
      "        queue->next = new_node;",
      "    }",
      "    return new_node;",
      "}",
      "",
      "Node *queue_remove(Node *queue)",
      "{",
      "    Node *temp = NULL;",
      "    if (queue == NULL)",
      "    {",
      "        printf(\"Red je prazan\\n\");",
      "        return NULL;",
      "    }",
      "    temp = queue;",
      "    queue = queue->next;",
      "    free(temp);",
      "    return queue;",
      "}",
      "",
      "Node *queue_remove_all(Node *queue)",
      "{",
      "    Node *temp = NULL;",
      "    while (queue != NULL)",
      "    {",
      "        temp = queue;",
      "        queue = queue->next;",
      "        free(temp);",
      "    }",
      "    return queue;",
      "}",
      "",
      "Node *queue_find(Node *queue, char index[])",
      "{",
      "    while (queue != NULL)",
      "    {",
      "        if (strcmp(queue->index, index) == 0)",
      "        {",
      "            return queue;",
      "        }",
      "        queue = queue->next;",
      "    }",
      "    return NULL;",
      "}",
      "",
      "Node *queue_modify(Node *queue, char index[], char name[], int age, int year)",
      "{",
      "    Node *temp = NULL;",
      "    temp = queue_find(queue, index);",
      "    if (temp == NULL)",
      "    {",
      "        printf(\"Nema tog elementa\\n\");",
      "        return NULL;",
      "    }",
      "    strcpy(temp->name, name);",
      "    temp->age = age;",
      "    temp->year = year;",
      "    return temp;",
      "}",
      "",
      "void queue_print(Node *queue)",
      "{",
      "    while (queue != NULL)",
      "    {",
      "        printf(\"%s %s %d %d \\n\", queue->index, queue->name, queue->age, queue->year);",
      "        queue = queue->next;",
      "    }",
      "}",
      "",
      "int main()",
      "{",
      "    Node *queue = NULL;",
      "    Node *temp = NULL;",
      "    char index[20];",
      "    char name[20];",
      "    int age;",
      "    int year;",
      "",
      "    int run = 1;",
      "    int opcija;",
      "",
      "    while (run)",
      "    {",
      "        printf(\"1. Unesite osobu\\n\");",
      "        printf(\"2. Prikazi osobe\\n\");",
      "        printf(\"3. Brisanje prve osobe u redu\\n\");",
      "        printf(\"4. Brisanje svih osoba u redu \\n\");",
      "        printf(\"5. Ispis podataka na osnovu indexa\\n\");",
      "        printf(\"6. Modifikovanje podataka na osnovu indexa\\n\");",
      "        printf(\"7. \\n\");",
      "        printf(\"8. \\n\");",
      "        printf(\"0. Izlaz\\n\");",
      "",
      "        printf(\"Unesite opciju: \");",
      "        scanf(\"%d\", &opcija);",
      "",
      "        switch (opcija)",
      "        {",
      "        case 1:",
      "        {",
      "            printf(\"Unesite index: \");",
      "            scanf(\"%s\", &index);",
      "            printf(\"Unesite ime: \");",
      "            scanf(\"%s\", &name);",
      "            printf(\"Unesite godine: \");",
      "            scanf(\"%d\", &age);",
      "            printf(\"Unesite godinu: \");",
      "            scanf(\"%d\", &year);",
      "            temp = queue_add(queue, index, name, age, year);",
      "            if (temp)",
      "            {",
      "                printf(\"Nova osoba je dodata\\n\");",
      "                if (queue == NULL)",
      "                {",
      "                    queue = temp;",
      "                }",
      "            }",
      "        }",
      "        break;",
      "        case 2:",
      "        {",
      "            queue_print(queue);",
      "        }",
      "        break;",
      "        case 3:",
      "        {",
      "            queue = queue_remove(queue);",
      "        }",
      "        break;",
      "        case 4:",
      "        {",
      "            queue = queue_remove_all(queue);",
      "        }",
      "        break;",
      "        case 5:",
      "        {",
      "            printf(\"Unesite index: \");",
      "            scanf(\"%s\", &index);",
      "            temp = queue_find(queue, index);",
      "            if (temp)",
      "            {",
      "                printf(\"Osoba je pronadjena\\n\");",
      "                printf(\"%s %s %d %d \\n\", temp->index, temp->name, temp->age, temp->year);",
      "            }",
      "            else",
      "            {",
      "                printf(\"Osoba nije pronadjena\\n\");",
      "            }",
      "        }",
      "        break;",
      "        case 6:",
      "        {",
      "            printf(\"Unesite index: \");",
      "            scanf(\"%s\", &index);",
      "            temp = queue_find(queue, index);",
      "            if (temp)",
      "            {",
      "                printf(\"Unesite ime: \");",
      "                scanf(\"%s\", &name);",
      "                printf(\"Unesite godine: \");",
      "                scanf(\"%d\", &age);",
      "                printf(\"Unesite godinu: \");",
      "                scanf(\"%d\", &year);",
      "                temp = queue_modify(queue, index, name, age, year);",
      "                printf(\"Podaci su modifikovani\\n\");",
      "            }",
      "            else",
      "            {",
      "                printf(\"Osoba sa indexom %s nije pronadjena\\n\", index);",
      "            }",
      "        }",
      "        break;",
      "        case 7:",
      "        {",
      "        }",
      "        break;",
      "        case 8:",
      "        {",
      "        }",
      "        break;",
      "        case 0:",
      "        {",
      "            run = 0;",
      "        }",
      "        break;",
      "        default:",
      "        {",
      "            printf(\"Uneta opcija ne postoji!\\n\");",
      "        }",
      "        break;",
      "        }",
      "    }",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Queue student"
  },
  "Stack book": {
  "prefix": "stackbook",
  "body": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "#include <math.h>",
    "#include <string.h>",
    "#include <malloc.h>",
    "",
    "typedef struct book",
    "{",
    "    char barCode[20];",
    "    char name[20];",
    "    char author[20];",
    "    int pages;",
    "",
    "} Book;",
    "",
    "typedef struct stack",
    "{",
    "    Book book;",
    "    struct elem *sled;",
    "} Stack;",
    "",
    "void push(Stack **top, Book book)",
    "{",
    "    Stack *novi = (Stack *)malloc(sizeof(Stack));",
    "    novi->book = book;",
    "    novi->sled = *top;",
    "    *top = novi;",
    "}",
    "",
    "void pop(Stack **top)",
    "{",
    "    Stack *tek = *top;",
    "    *top = tek->sled;",
    "    free(tek);",
    "}",
    "",
    "void printStack(Stack *top)",
    "{",
    "    Stack *tek = top;",
    "    while (tek != NULL)",
    "    {",
    "        printf(\"Bar code: %s\\n\", tek->book.barCode);",
    "        printf(\"Name: %s\\n\", tek->book.name);",
    "        printf(\"Author: %s\\n\", tek->book.author);",
    "        printf(\"Pages: %d\\n\", tek->book.pages);",
    "        printf(\"\\n\");",
    "        tek = tek->sled;",
    "    }",
    "}",
    "",
    "void modifyBook(Stack *top, char *barCode)",
    "{",
    "    Stack *tek = top;",
    "    while (tek != NULL)",
    "    {",
    "        if (strcmp(tek->book.barCode, barCode) == 0)",
    "        {",
    "            printf(\"Unesite novi bar kod: \");",
    "            scanf(\"%s\", tek->book.barCode);",
    "            printf(\"Unesite novi ime knjige: \");",
    "            scanf(\"%s\", tek->book.name);",
    "            printf(\"Unesite novi ime autora: \");",
    "            scanf(\"%s\", tek->book.author);",
    "            printf(\"Unesite novi broj strana: \");",
    "            scanf(\"%d\", &tek->book.pages);",
    "        }",
    "        tek = tek->sled;",
    "    }",
    "}",
    "",
    "Stack *findBook(Stack *top, char *barCode)",
    "{",
    "    Stack *tek = top;",
    "    while (tek != NULL)",
    "    {",
    "        if (strcmp(tek->book.barCode, barCode) == 0)",
    "        {",
    "            return tek;",
    "        }",
    "        tek = tek->sled;",
    "    }",
    "    return NULL;",
    "}",
    "",
    "void printBook(Stack *top, char *barCode)",
    "{",
    "    Stack *tek = top;",
    "    while (tek != NULL)",
    "    {",
    "        if (strcmp(tek->book.barCode, barCode) == 0)",
    "        {",
    "            printf(\"Bar code: %s\\n\", tek->book.barCode);",
    "            printf(\"Name: %s\\n\", tek->book.name);",
    "            printf(\"Author: %s\\n\", tek->book.author);",
    "            printf(\"Pages: %d\\n\", tek->book.pages);",
    "            printf(\"\\n\");",
    "        }",
    "        tek = tek->sled;",
    "    }",
    "}",
    "",
    "void deleteFirstBook(Stack **top)",
    "{",
    "    Stack *tek = *top;",
    "    *top = tek->sled;",
    "    free(tek);",
    "}",
    "",
    "void deleteAllBooks(Stack **top)",
    "{",
    "    while (*top != NULL)",
    "    {",
    "        Stack *tek = *top;",
    "        *top = tek->sled;",
    "        free(tek);",
    "    }",
    "}",
    "",
    "/* Swap places of book with most pages and least */",
    "void swap(Stack **top)",
    "{",
    "    Stack *tek = *top;",
    "    Stack *max = *top;",
    "    Stack *min = *top;",
    "    while (tek != NULL)",
    "    {",
    "        if (tek->book.pages > max->book.pages)",
    "        {",
    "            max = tek;",
    "        }",
    "        if (tek->book.pages < min->book.pages)",
    "        {",
    "            min = tek;",
    "        }",
    "        tek = tek->sled;",
    "    }",
    "    Book temp = max->book;",
    "    max->book = min->book;",
    "    min->book = temp;",
    "}",
    "",
    "int main()",
    "{",
    "",
    "    int run = 1;",
    "    int opcija;",
    "    Stack *top = NULL;",
    "",
    "    while (run)",
    "    {",
    "        printf(\"1. Unesite knjigu\\n\");",
    "        printf(\"2. Prikazi knjige\\n\");",
    "        printf(\"3. Brisanje prve knjige sa steka\\n\");",
    "        printf(\"4. Brisanje svih knjiga sa steka \\n\");",
    "        printf(\"5. Ispis podataka knjige na osnovu bar koda\\n\");",
    "        printf(\"6. Modifikovanje podataka na osnovu bar koda\\n\");",
    "        printf(\"7. Zamena mesta knjige sa najvise i najmanje strana\\n\");",
    "        printf(\"8. \\n\");",
    "        printf(\"0. Izlaz\\n\");",
    "",
    "        printf(\"Unesite opciju: \");",
    "        scanf(\"%d\", &opcija);",
    "",
    "        switch (opcija)",
    "        {",
    "        case 1:",
    "        {",
    "            Book book;",
    "            printf(\"Unesite bar kod: \");",
    "            scanf(\"%s\", book.barCode);",
    "            if (findBook(top, book.barCode) != NULL)",
    "            {",
    "                printf(\"Knjiga sa tim bar kodom vec postoji!\\n\");",
    "                break;",
    "            }",
    "            else",
    "            {",
    "                printf(\"Unesite ime knjige: \");",
    "                scanf(\"%s\", book.name);",
    "                printf(\"Unesite ime autora: \");",
    "                scanf(\"%s\", book.author);",
    "                printf(\"Unesite broj strana: \");",
    "                scanf(\"%d\", &book.pages);",
    "                push(&top, book);",
    "                printf(\"Knjiga je uspesno dodata!\\n\\n\");",
    "            }",
    "        }",
    "        break;",
    "        case 2:",
    "        {",
    "            printStack(top);",
    "        }",
    "        break;",
    "        case 3:",
    "        {",
    "            pop(&top);",
    "            printf(\"Knjiga je uspesno obrisana!\\n\");",
    "        }",
    "        break;",
    "        case 4:",
    "        {",
    "            while (top != NULL)",
    "            {",
    "                pop(&top);",
    "            }",
    "            printf(\"Sve knjige su uspesno obrisane!\\n\");",
    "        }",
    "        break;",
    "        case 5:",
    "        {",
    "            char barCode[20];",
    "            printf(\"Unesite bar kod: \\n\");",
    "            scanf(\"%s\", barCode);",
    "            printBook(top, barCode);",
    "        }",
    "        break;",
    "        case 6:",
    "        {",
    "            char barCode[20];",
    "            printf(\"Unesite bar kod: \\n\");",
    "            scanf(\"%s\", barCode);",
    "            modifyBook(top, barCode);",
    "        }",
    "        break;",
    "        case 7:",
    "        {",
    "            swap(&top);",
    "            printf(\"Knjige su uspesno zamenjene!\\n\");",
    "        }",
    "        break;",
    "        case 8:",
    "        {",
    "        }",
    "        break;",
    "        case 0:",
    "        {",
    "            run = 0;",
    "        }",
    "        break;",
    "        default:",
    "        {",
    "            printf(\"Uneta opcija ne postoji!\\n\");",
    "        }",
    "        break;",
    "        }",
    "    }",
    "",
    "    return 0;",
    "}"
  ],
  "description": "Stack book"
},
  "C language cheatsheet": {
    "prefix": "cheatsheet",
    "body": [
      "/*",
      "p = &broj (pokazuje na adresu promenljive broj)",
      "p = broj (pokazivac pokazuje na vrednost promenljive broj)",
      "x = p; (adresu memorijske lokacije dodeljuje promenljivoj)",
      "x = *p (daje vrednost promenljive na koju pokazuje pokazivac)",
      "x = (*p)++ (x ce biti vrednost promenljive na koju pokazivac pokazuje + 1)",
      "p = &A[0] <=> p = A tj pokazuje na prvi index niza A",
      "p = &A[2] pokazuje na drugi index niza A",
      "*A <=> p = A;",
      "*(A + 1) <=> A[1]",
      "Nakon p = A dobijamo p[0] <=> *p <=> A[0]",
      "Nakon p = A dobijamo p[n] <=> *(p+n) <=> A[n]",
      "char *strcpy(char *dest, const char *src) – kopira string src u string dest",
      "char *strcat(char *dest, const char *src) – nadovezuje string s na kraj stringa dest",
      "int strcmp(const char *str1, const char *str2) – vrši poređenje dva stringa",
      "char *strchr(const char *str, int c) – pronalazi prvu poziciju karaktera c u stringu str",
      "char *strstr(const char *haystack, const char *needle) – proverava da li se u stringu",
      "",
      "*/"
    ],
    "description": "Creates menu scheme"
  }
}
